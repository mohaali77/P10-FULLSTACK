# Ce fichier est un workflow GitHub Actions qui exécute les tests du backend
#
# Il est déclenché par un autre workflow (workflow_call) et
# utilise le cache GitHub Actions pour optimiser le processus de test
#
# Jobs :
# - test-backend : exécute les tests du backend
#

name: Testing Backend

# Ce workflow est déclenché lorsqu'il est appelé par un autre workflow
on:
  workflow_call:

# Définition des jobs à exécuter dans ce workflow
jobs:

  # Exécute les tests du backend
  test-backend:
    name: Backend tests and coverage
    # S'exécute sur un runner avec une version d'Ubuntu récente
    runs-on: ubuntu-latest

    # Défini la sortie du job pour pouvoir l'utiliser dans d'autres jobs
    outputs:
      back-report-url: ${{ steps.test-report-backend.outputs.runHtmlUrl }}

    # Défini des paramètres par défaut pour les étapes de ce job
    defaults:
      run:
        working-directory: back

    # Étapes de ce job
    steps:

      # Étape 1 : Récupérer le code du dépôt avec Git
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Récupère seulement le dernier commit
          fetch-depth: 1

      # Étape 2 : Récupérer le cache de Maven
      - name: Setup Maven packages cache
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ github.ref_name }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 3 : Installer Java 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      # Étape 4 : Installer les dépendances et tester le projet
      - name: Test using Maven
        run: mvn --batch-mode --update-snapshots clean verify

      # Étape 5 : Envoyer le rapport des tests Surefire
      - name: Upload Test Results (Surefire)
        uses: actions/upload-artifact@v4
        with:
          # Nom de l'artefact qui sera créé
          name: surefire-reports
          path: back/target/surefire-reports/

      # Étape 6 : Envoyer le rapport des tests Failsafe
      - name: Upload Test Results (Failsafe)
        uses: actions/upload-artifact@v4
        with:
          # Nom de l'artefact qui sera créé
          name: failsafe-reports
          path: back/target/failsafe-reports/
          # Ignorer l'étape si aucun fichier n'est trouvé
          # Cela peut arriver si les tests d'intégration échouent
          # et que le rapport de test Failsafe n'est pas généré
          if-no-files-found: ignore

      # Étape 7 : Envoyer le rapport de couverture Jacoco
      - name: Upload coverage report (Jacoco)
        uses: actions/upload-artifact@v4
        with:
          # Nom de l'artefact qui sera créé
          name: jacoco-report
          path: back/target/site/jacoco

      # Étape 8 : Générer le rapport de test Github
      - name: Generate Github Test Report
        uses: phoenix-actions/test-reporting@v15
        # ID de l'étape pour pouvoir l'utiliser dans d'autres jobs
        # et pour pouvoir lire les variables de sortie
        id: test-report-backend
        # Exécuter cette étape même si les tests échouent
        # pour pouvoir générer le rapport de test
        # et l'envoyer à Github
        if: (success() || failure()) && github.ref_name != 'main'
        with:
          # Le nom du rapport qui sera affiché dans Github
          name: Backend Tests Report
          # Chemin vers les rapports de test à utiliser
          path: back/target/**/TEST*.xml
          # Format du rapport de test à utiliser
          reporter: java-junit

      # Étape 9 : Lire les variables de sortie
      - name: Print backend report URL
        if: success() && github.ref_name != 'main'
        run: |
          echo "url is ${{ steps.test-report-backend.outputs.runHtmlUrl }}"

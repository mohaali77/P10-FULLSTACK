name: Pipeline

# --------------------------------------------------------------------
# Déclencheurs :
# - A chaque push sur la branche main
# - A chaque ouverture/mise à jour d’une pull request vers main
# --------------------------------------------------------------------
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  # ==================================================================
  # JOB "detect-changes"
  # Objectif : détecter automatiquement les fichiers modifiés
  # ==================================================================
  detect-changes:

    runs-on: ubuntu-latest

    # --------------------------------------------------------------
    # On définit ici les valeurs de sortie
    # - back  : sera "true" si des fichiers du dossier /back ont changé
    # - front : sera "true" si des fichiers du dossier /front ont changé
    # Ces valeurs seront ensuite utilisées dans les autres jobs
    # --------------------------------------------------------------
    outputs:
      back: ${{ steps.filter.outputs.back }}
      front: ${{ steps.filter.outputs.front }}

    steps:
      - uses: actions/checkout@v4

      # --------------------------------------------------------------
      # Détecter les changements de fichiers
      # --------------------------------------------------------------
      - name: Detect changed paths          # Nom lisible de l’étape
        id: filter                          # Identifiant (pour réutiliser les résultats)
        uses: dorny/paths-filter@v3         # Action GitHub qui compare les chemins modifiés
        with:
          # ----------------------------------------------------------
          # Filtres à surveiller :
          # - "back/**"  : tous les fichiers du dossier back
          # - "front/**" : tous les fichiers du dossier front
          # Si un commit modifie un fichier dans ces dossiers,
          # l’action retournera back=true ou front=true
          # ----------------------------------------------------------
          filters: |
            back:
              - 'back/**'
            front:
              - 'front/**'

  # ==================================================================
  # PARTIE BACKEND - Tests unitaires + générer rapport de couverture + analyse SonarCloud
  # ==================================================================
  backend-tests:
    name: Backend - Tests & Coverage
    runs-on: ubuntu-latest   # Hébergement sur un serveur linux
    needs: detect-changes
    # Exécuté uniquement si des fichiers dans /back ont changé
    if: needs.detect-changes.outputs.back == 'true'

    steps:
      # --------------------------------------------------------------
      # Récupère le code du dépôt
      # --------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      # --------------------------------------------------------------
      # Installe Java 25 sur le serveur
      # - l'appli utilise Java 11, mais java 25 est requis par les versions récentes de Sonar
      # --------------------------------------------------------------
      - name: Set up Java 25
        uses: actions/setup-java@v3
        with:
          java-version: '25'
          distribution: 'temurin'

      # --------------------------------------------------------------
      # Met en cache les dépendances Maven pour accélérer les builds.
      # Si le fichier pom.xml change, le cache est régénéré automatiquement.
      # Cela évite de retélécharger toutes les librairies à chaque exécution.
      # --------------------------------------------------------------
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # --------------------------------------------------------------
      # Lance la compilation et les tests du back-end avec Maven.
      # La commande 'mvn clean verify' exécute les tests et génère
      # le rapport de couverture de code JaCoCo dans le dossier /back.
      # --------------------------------------------------------------
      - name: Run backend tests with JaCoCo
        run: mvn clean verify
        working-directory: back

      # --------------------------------------------------------------
      # Archive le rapport de couverture JaCoCo dans la section "artifact" de l'onglet Actions du repo
      # Cela permet de le télécharger ou le consulter après l’exécution.
      # --------------------------------------------------------------
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco

      # --------------------------------------------------------------
      # Analyse SonarCloud (backend)
      # - Utilise le plugin Maven sonar:sonar
      # - Envoie à SonarCloud :
      #   * l’organisation, la clé projet, l’URL du serveur
      #   * le token d’authentification (secrets GitHub)
      #   * le chemin du rapport JaCoCo XML (couverture)
      # --------------------------------------------------------------
      - name: Run SonarCloud analysis (backend)
        working-directory: back
        run: |
          mvn -B -q sonar:sonar \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_BACK }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ==================================================================
  # PARTIE FRONTEND - Tests Angular + couverture + analyse SonarCloud
  # ==================================================================
  frontend-tests:
    needs: detect-changes
    # Exécuté uniquement si des fichiers dans /front ont changé
    if: needs.detect-changes.outputs.front == 'true'
    name: Frontend - Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------------
      # Récupère le code
      # --------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      # --------------------------------------------------------------
      # Installe Node.js pour Angular/Karma/Jasmine
      # --------------------------------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # --------------------------------------------------------------
      # Installation des dépendances front (via package-lock.json)
      # --------------------------------------------------------------
      - name: Install dependencies
        run: npm ci
        working-directory: front

      # --------------------------------------------------------------
      # Lance les tests Angular et génère le rapport de couverture
      # - --watch=false : ne pas relancer automatiquement les tests à chaque modification du code
      # - --code-coverage : crée coverage/lcov.info et le rapport HTML
      # -  En CI, Karma doit utiliser Chrome Headless, donc le fichier "karma.conf" a été configuré
      # --------------------------------------------------------------
      - name: Run Angular tests with coverage
        run: npm run test -- --watch=false --code-coverage
        working-directory: front

      # --------------------------------------------------------------
      # Archive le rapport de couverture Angular dans artifact
      # --------------------------------------------------------------
      - name: Upload Angular coverage report
        uses: actions/upload-artifact@v4
        with:
          name: angular-coverage
          path: front/coverage

      # --------------------------------------------------------------
      # Installe le scanner Sonar côté front (CLI JavaScript)
      # - Nécessaire car le front n'utilise pas Maven
      # --------------------------------------------------------------
      - name: Install Sonar Scanner
        run: npm install -g sonar-scanner
        working-directory: front

      # --------------------------------------------------------------
      # Analyse SonarCloud (frontend)
      # - Déclare la source à analyser : 'src'
      # - Exclut node_modules et les fichiers de tests (*.spec.ts)
      # - Fournit le chemin du rapport de couverture : coverage/lcov.info
      # - Les mêmes secrets Sonar que pour le back doivent exister,
      #   avec la clé projet front : SONAR_PROJECT_KEY_FRONT
      # --------------------------------------------------------------
      - name: Run SonarCloud analysis (frontend)
        working-directory: front
        run: |
          sonar-scanner \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY_FRONT }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # ==================================================================
  # PARTIE DOCKER - Build & Push des images (back + front) sur Docker Hub
  # ==================================================================
  docker-build-push:
    name: Docker Build & Push to Docker Hub
    runs-on: ubuntu-latest

    # ----------------------------------------------------------------
    # Attend la réussite des jobs de tests (back + front)
    # cela garantit que seules des versions validées sont poussées
    # ----------------------------------------------------------------
    needs: [detect-changes,backend-tests, frontend-tests]
    # Exécute le job Docker uniquement si le back OU le front a été modifié
    if: |
      needs.detect-changes.outputs.back == 'true' || needs.detect-changes.outputs.front == 'true'

    steps:
      # --------------------------------------------------------------
      # Récupère le code
      # --------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # --------------------------------------------------------------
      # Connexion à Docker Hub avec les secrets du repo :
      # - DOCKERHUB_USERNAME : ton identifiant Docker Hub
      # - DOCKERHUB_TOKEN    : Access Token avec droits Read & Write
      # --------------------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --------------------------------------------------------------
      # Build & Push de l'image BACKEND
      # Exécuté uniquement si des fichiers dans /back ont changé
      # - Construit à partir de /back 
      # - Tag : <username>/p10-fullstack-back:latest
      # - Le repo public doit exister sur Docker Hub
      # --------------------------------------------------------------
      - name: Build & push backend image
        if: needs.detect-changes.outputs.back == 'true'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/p10-fullstack-back:latest ./back
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p10-fullstack-back:latest

      # --------------------------------------------------------------
      # Build & Push de l'image FRONTEND
      # Exécuté uniquement si des fichiers dans /front ont changé
      # - Construit à partir de /front 
      # - Tag : <username>/p10-fullstack-front:latest
      # --------------------------------------------------------------
      - name: Build & push frontend image
        if: needs.detect-changes.outputs.front == 'true'
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/p10-fullstack-front:latest ./front
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p10-fullstack-front:latest



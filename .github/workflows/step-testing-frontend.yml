# Ce fichier est un workflow GitHub Actions qui exécute les tests du frontend
#
# Il est déclenché par un autre workflow (workflow_call) et
# utilise le cache GitHub Actions pour optimiser le processus de test
#
# Jobs :
# - test-frontend : exécute les tests du frontend
#

name: Testing Frontend

# Ce workflow est déclenché lorsqu'il est appelé par un autre workflow
on:
  workflow_call:

# Définition des jobs à exécuter dans ce workflow
jobs:

  # Exécute les tests du frontend
  test-frontend:
    name: Frontend tests and coverage
    # S'exécute sur un runner avec une version d'Ubuntu récente
    runs-on: ubuntu-latest

    # Défini la sortie du job pour pouvoir l'utiliser dans d'autres jobs
    outputs:
      front-report-url: ${{ steps.test-report-frontend.outputs.runHtmlUrl }}

    # Étapes de ce job
    steps:

      # Étape 1 : Récupérer le code du dépôt avec Git
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Récupère seulement le dernier commit
          fetch-depth: 1

      # Étape 2 : Récupérer le cache de npm
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ github.ref_name }}
          restore-keys: ${{ runner.os }}-node

      # Étape 3 : Installer Node.js 18 et récupérer le cache de npm
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Étape 4 : Installer les dépendances du projet
      - name: Npm install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false
        working-directory: front

      # Étape 5 : Tester le projet
      - name: Run project tests
        run: npm run test:ci
        working-directory: front

      # Étape 6 : Envoyer le rapport de couverture
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: karma-report
          path: front/coverage

      # Étape 7 : Générer le rapport de test Github
      - name: Generate Github Test Report
        uses: phoenix-actions/test-reporting@v15
        # ID de l'étape pour pouvoir l'utiliser dans d'autres jobs
        # et pour pouvoir lire les variables de sortie
        id: test-report-frontend
        # Exécuter cette étape même si les tests échouent
        # pour pouvoir générer le rapport de test
        # et l'envoyer à Github
        if: (success() || failure()) && github.ref_name != 'main'
        with:
          # Le nom du rapport qui sera affiché dans Github
          name: Frontend Tests Report
          # Chemin vers les rapports de test à utiliser
          path: front/coverage/**/junit.xml
          # Format du rapport de test à utiliser
          reporter: java-junit

      # Étape 8 : Lire les variables de sortie
      - name: Print frontend report URL
        if: success() && github.ref_name != 'main'
        run: |
          echo "url is ${{ steps.test-report-frontend.outputs.runHtmlUrl }}"

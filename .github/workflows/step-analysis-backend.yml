name: SonarQube Analysis

# Ce workflow est déclenché lorsqu'il est appelé par un autre workflow
on:
  workflow_call:
    # Secrets pour le workflow
    secrets:
      SONAR_ORGANIZATION:
        required: true
        description: 'SonarQube organization'
      SONAR_TOKEN:
        required: true
        description: 'SonarQube token'
      SONAR_HOST_URL:
        required: true
        description: 'SonarQube server URL'
      SONAR_PROJECT_KEY:
        required: true
        description: 'SonarQube project key'

# Définition des jobs à exécuter dans ce workflow
jobs:

  # Exécute l'analyse du backend avec SonarQube
  analysis:
    name: Backend Analysis with SonarQube
    # S'exécute sur un runner avec une version d'Ubuntu récente
    runs-on: ubuntu-latest

    # Étapes de ce job
    steps:

      # Étape 1 : Récupérer le code du dépôt avec Git
      - uses: actions/checkout@v4
        with:
          # Récupère le code du dépôt avec l'historique complet
          # pour une meilleure pertinence de l'analyse
          fetch-depth: 0

      # Étape 2 : Utiliser le cache de Maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ github.ref_name }}
          restore-keys: ${{ runner.os }}-m2

      # Étape 3 : Installer Java 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      # Étape 4 : Compiler et tester le backend
      - name: Build and test using Maven
        run: mvn --batch-mode --update-snapshots clean package
        working-directory: back

      # Étape 5 : Utiliser le cache de SonarQube
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ github.ref_name }}
          restore-keys: ${{ runner.os }}-sonar

      # Étape 6 - A : Analyser le code avec SonarQube (Pull Request)
      - name: Analyze with SonarQube
        if: ${{ github.event_name == 'pull_request' || github.base_ref == 'refs/heads/release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: back
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:5.1.0.4751:sonar \
            --define sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            --define sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            --define sonar.token=${{ secrets.SONAR_TOKEN }} \
            --define sonar.qualitygate.wait=true

      # Étape 6 - B : Analyser le code avec SonarQube (Branch)
      - name: Analyze with SonarQube
        if: ${{ github.event_name != 'pull_request' && github.base_ref != 'refs/heads/release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: back
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:5.1.0.4751:sonar \
            --define sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            --define sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            --define sonar.token=${{ secrets.SONAR_TOKEN }}
